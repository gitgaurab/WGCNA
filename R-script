install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival"))
source("http://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
biocLite("impute")
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install(version = "3.10") ##Check the latest version if available
BiocManager::install("GO.db")
BiocManager::install("preprocessCore")
BiocManager::install("impute")
install.packages("WGCNA")
library(WGCNA)
#########################################
# The following setting is important, do not omit.
options(stringsAsFactors = FALSE)
data<-read.csv("../../Final analysis_RNA_seq_SILVA_STAR/Network_analysis/unique_genes.csv")


#Read in the data set (From Tutorial)
#data = read.csv("LiverFemale3600.csv");
# Take a quick look at what is in the data set:

##Check the dataset
dim(data)
names(data)

#########Transposing data except first column which had gene ID
data0<-as.data.frame(t(data[,-c(1)]))

#####Assigning names (gene names)
names(data0)<-data$genes

####Provide the rownames (Remember we need to transpose the data)
rownames(data0)<-names(data)[-c(1)]


#################### Below is the code from manual don't use here ############
datExpr0 = as.data.frame(t(femData[, -c(1:8)]))####
names(datExpr0) = femData$substanceBXH############
rownames(datExpr0) = names(femData)[-c(1:8)]#########
###################################################

### check for genes and samples with too many missing values:
gsg = goodSamplesGenes(data0, verbose = 3)
gsg$allOK

#####Last statement gave 'TRUE' value so there are not any genes with missing data

##Cluster to see if there are any outliers
sampletree<-hclust(dist(data0),method = 'average')

# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6)
par(mar = c(0,4,2,0))
plot(sampletree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,cex.axis = 1.5, cex.main = 2)
####Plot looks good !!!! READY TO GO!!!!!!!!!

###################Automatic analysis method######################
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=20, by=2))

# Call the network topology analysis function
sft = pickSoftThreshold(data0, powerVector = powers, verbose = 5)

# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2))
cex1 = 0.9
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",main = paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],labels=powers,cex=cex1,col="red")
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
####Run the network analysis ###Unsigned power 16 cut 0.25 minimum module size=30
net = blockwiseModules(data0, power = 16,TOMType = "unsigned", minModuleSize = 30,reassignThreshold = 0, mergeCutHeight = 0.25,numericLabels = TRUE, pamRespectsDendro = FALSE,saveTOMs = TRUE,saveTOMFileBase = "scabTOM",verbose = 3)
#####Check the number of modules obtained
table(net$colors)
###Lets plot the dendogram
# open a graphics window
sizeGrWindow(12, 9)
# Convert labels to colors for plotting
mergedColors = labels2colors(net$colors)
# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],"Module colors",dendroLabels = FALSE, hang = 0.03,addGuide = TRUE, guideHang = 0.05)

#####We now save the module assignment and module eigengene information necessary for subsequent analysis.
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
MEs = net$MEs;
geneTree = net$dendrograms[[1]]
save(MEs, moduleLabels, moduleColors, geneTree,file = "../../Final analysis_RNA_seq_SILVA_STAR/Network_analysis/scab-networkConstruction-auto.RData")

##Load the data (Skip from this line to '####Extract genes in each module' below: I did not find so important for WGCNA)

lnames<-load("../../Final analysis_RNA_seq_SILVA_STAR/Network_analysis/scab-networkConstruction-auto.RData")
lnames
nGenes = ncol(data0)
nSamples = nrow(data0)
# Calculate topological overlap anew: this could be done more efficiently by saving the TOM
# calculated during module detection, but let us do it again here.
dissTOM<-1-TOMsimilarityFromExpr(data0, power = 16)
# Transform dissTOM with a power to make moderately strong connections more visible in the heatmap
plotTOM = dissTOM^7;
# Set diagonal to NA for a nicer plot
diag(plotTOM) = NA;
# Call the plot function
sizeGrWindow(9,9)
TOMplot(plotTOM, geneTree, moduleColors, main = "Network heatmap plot, all genes")
diag(dissTOM) = NA
sizeGrWindow(9,9)
TOMplot(dissTOM, geneTree, moduleColors, main = "Network heatmap plot, all genes")

##########################################


####Extract genes in each module
table(moduleColors) ###Check different module colors
write.csv((brown<-names(data0)[moduleColors=="brown"]),"../../Final analysis_RNA_seq_SILVA_STAR/Network_analysis/Brown.csv") ##Example for Brown module

